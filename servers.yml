Description: Security Groups Servers Autoscale Groups

Parameters:
  EnvironmentName:
    Description: environment name to prefix to resource
    Type: String
  
  AMIID:
    Description: AMI ID linux 2
    Type: String

  EC2Type:
    Description: EC2 instance type
    Type: String

  EBSSize:
    Description: EBS volume size
    Type: String

  KeyID:
    Description: EC2 key
    Type: String

Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow http to ALB
      GroupName: ALBSecurityGroup
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          DestinationSecurityGroupId: !Ref PublicSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          DestinationSecurityGroupId: !Ref PublicSecurityGroup
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: name 
          Value: !Sub ${EnvironmentName}-ALBSecGroup
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"

  WebServSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow http to hosts and ssh inbound from local. Allow all outbound.
      GroupName: WebServSecurityGroup
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: name 
          Value: !Sub ${EnvironmentName}-WebServSecGroup
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  AutoScalingGroupLaunchConfig2:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      AssociatePublicIpAddress: true
      BlockDeviceMappings: 
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: !Ref EBSSize
      ImageId: !Ref AMIID
      InstanceMonitoring: false
      InstanceType: !Ref EC2Type
      KeyName: !Ref KeyID
      LaunchConfigurationName: AutoScalingGroupLaunchConfig2
      SecurityGroups: 
        - Ref: WebServSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "Udacity Demo Web Server Up and Running! on "$HOSTNAME > index.html

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      LaunchConfigurationName: !Ref AutoScalingGroupLaunchConfig2
      MaxSize: '4'
      MinSize: '2'
      TargetGroupARNs: 
        - Ref: ALBTargetGroup
      VPCZoneIdentifier: 
        - Fn::ImportValue: !Sub "${EnvironmentName}-PrivSubnet1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PrivSubnet2"
  
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      SecurityGroups: 
        - Ref: ALBSecurityGroup
      Subnets: 
        - Fn::ImportValue: !Sub "${EnvironmentName}-PubSubnet1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PubSubnet2"
        - !Ref ALBSecurityGroup
      Tags: 
        - Key: name
          Value: !Sub ${EnvironmentName}-ALB
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      Conditions: 
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref ALBListener
      Priority: 1

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      Tags: 
        - Key: name
          Value: !Sub ${EnvironmentName}-ALBTargetGrp
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      GroupName: SSHSecurityGroup
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      Tags: 
      - Key: name 
        Value: !Sub ${EnvironmentName}-SSHSecGrp

  JumpEC2:
      Type: AWS::EC2::Instance
      Properties:
        AvailabilityZone: us-west-2
        ImageId: AMIID
        KeyName: !Ref KeyID
        InstanceType: t2.micro
        SubnetId: 
          Fn::ImportValue: !Sub "${EnvironmentName}-PubSubnet1"
        SecurityGroups:
          - !Ref SSHSecurityGroup
        BlockDeviceMappings:
          -
            DeviceName: /dev/sdk
            Ebs:
              VolumeSize: 10
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash 
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            echo "Proj2 Jump "$HOSTNAME > index.html

Outputs:
  LBSecGroup:
    Description: LB Security Group reference
    Value: !Ref ALBSecurityGroup
    Export: 
      Name: !Sub ${EnvironmentName}-ALBSecGroup

  WebSecGroup:
    Description: Web Security Group reference
    Value: !Ref WebServSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-WebSecgroup

  ALBDNS:
    Description: DNS of ALB
    Value: !GetAtt AppLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-ALBDNS

